# -*-perl-*-

=head1 Refactoring with Moose

Introducing Moose into a pre-
existing codebase, tips for
success and traps to watch for

Tomas Doran:

    irc: t0m
    <br />
    bobtfish@bobtfish.net
    <br />
    CPAN: BOBTFISH

=head1 You may also know me from.

G<t0m-cpan.png>

=head1 Part 1 - Refactoring

=over

=item Is not a project.

=item Does not add functionality.

=item Does not take long.

=item Needs tests (I will say this again)

=item Is something you should do as you write code.

=item Can also be retrofitted (after you write tests)

=back

=head1 Foo

    'Any fool can write code that a computer
    understands. Only a good programmer
    can write code that a human
    understands’

- Martin Fowler

=head1 bar

=over

=item *

 Moose helps me write more consise,
easier to understand code.

=item *

So just converting a class to Moose ==
refactoring, right?

=back

=head1 quux

Just converting to Moose is
refactoring
(in my book at least).


=head1 baa

Just converting to Moose is
refactoring
IF YOU HAVE TESTS


=head1 quux

Part II - Common refactorings
• Replace constructor with factory method (BUILD)
• Encapsulate field (attributes)
• Change unidirectional association to bidirectional
(weak => 1)
• Hide delegate (handles)
• Extract interface (Roles)
• Tease apart inheritance (Roles)
• Replace inheritance with delegation (lazy_build)
• Replace data value with object (type coercions)
Page 14
Part II - Common refactorings
• Replace array with object (BUILDARGS, type
coercions)
• Duplicate observed data (handles, trigger, lazy_build)
• Encapsulate collection (MX::AttributeHelpers)
• Replace type code with subclass (augment)
• Replace type code with strategy (MX::Traits)
• Parameterize method (meta programming)
• Remove setting method (is => ‘ro’, init_arg => undef)
Page 15
Part III - Moose with existing
classes

Moose with existing classes
• Refactor gradually
– From the top down..
– Or the bottom up
• You need tests

Not inheriting a Moose::Object constructor (at all)
– You lose:
• BUILD
• default,
• builder,
– Can still use:
• lazy_build
• Roles
• Method modifiers


Not inheriting a Moose::Object
destructor
– Your own DESTROY method works just
like usual, no DEMOLISH

Don't go mad!
1. Convert several independent parts of the same
class hierarchy.
2. Use different combinations of MooseX modules
3. Write 3 of your own Moose::Exporter based
things.
– BANG. This will hurt you with metaclass
incompatibility

Beware global destruction
• Moving stuff onto the metaclass and delegating in
DEMOLISH methods (especially using handles
and/or MooseX::ClassAttribute) will hurt you.
Moose with existing classes


Not inheriting a Moose::Object constructor (at all)
– You lose:
• BUILD
• default,
• builder,
– Can still use:
• lazy_build
• Roles
• Method modifiers


Moose with existing classes
• Not inheriting a Moose::Object
destructor
– Your own DESTROY method works just
like usual, no DEMOLISH.

Don't go mad!
1. Convert several independent parts of the same
class hierarchy.
2. Use different combinations of MooseX modules
3. Write 3 of your own Moose::Exporter based
things.
– BANG. This will hurt you with metaclass
incompatibility.

Beware global destruction
• Moving stuff onto the metaclass and delegating in
DEMOLISH methods (especially using handles
and/or MooseX::ClassAttribute) will hurt you.
• This is not really the fault of Moose, it’s due to the
way global destruction works.
– KISS
– Did I mention tests?

Summary
• KISS
• Write better code
• Write less code
• Write more tests


=head1 Source Code

=begin perl

sub formatter_meta {
  my ($text) = @_;
  foreach (split /\n\n*/, $text) {
    next if(/^\s*$/ or /^\s*#/);
    s/\s*#.*$//; # we support comments
    my ($tag, $param, $option) = split /\s\s*/;
    if (! $option) {
      $option = $param;
      $param  = "";
    }
    print qq(<$tag $param>$option</$tag>\n);
  }
}

=end perl

=head1 Text Formatierung

B<Fetter Text>

I<Kursiver Text>

U<Underline Text>

 Ein Code Einzeiler.

=head2 Auch Listen gehen

=over

=item Eintrag 1

=item Eintrag 2

=item Eintrag 3

=back

=head1 Oder auch Links

Einfacher Link: L<http://www.daemon.de>.

Benannter Link: L<Daemon|http://www.daemon.de>.

=head1 Ein Bild

G<t0m-cpan.png>

=head1 Incremental Liste

=over

=item *

Zeile 1

=item *

Zeile 2

=item *

Zeile 3

=back


=head1 Haben Wollen ?

B<pod2s5> ist auf dem CPAN verfuegbar.

=cut
