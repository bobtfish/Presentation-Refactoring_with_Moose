# -*-perl-*-

=head1 Refactoring with Moose

Introducing Moose into a pre-
existing codebase, whist refactoring. Techniques and tips for
success and traps to watch for.

    Tomas Doran (t0m) &lt; bobtfish@bobtfish.net &gt;

=head1 Lies and fail

These slides are likely to be full of lies.

Please interrupt me at any point to pedantically point out said lies when you spot them.

I would.

=head1 Spoiling the fun

Anyone who does point out a mistake wins a prize:

    http://github.com/bobtfish/Presentation-Refactoring_with_Moose/tree/master

B<Patches welcome>

=head1 Who?

=over

=item Used to work at Venda (Hi anyone I don't know already!)

=item Catalyst core team

=item Moose committer

=item Has a module called L<MooseX::MethodAttributes::Role::Meta::Role> on CPAN

=item Is not proud of this

=item Has silly hair

=item Never writes bugs

=back

=head1 Last slide may contain up to one lie

=head1 Meditation

    'Any fool can write code that a computer
    understands. Only a good programmer
    can write code that a human
    understands'

- Martin Fowler

=head1 Refactoring

=over

=item *

Is not a project.

=item *

Does not add functionality.

=item *

Does not take long.

=item *

Needs tests (I will say this again)

=item *

Is something you should do as you write code.

=item *

Can also be retrofitted (after you write tests)

=back

=head1 Moose?

=over

=item It lets you express yourself more clearly, avoids bugs and encourages you to write better factored software.

=item It's what all the cool kids are using.

=item Naysayers tell you it's slow - it B<does> have a startup cost.

=item Catalyst got 20% faster (on perl 5.10) when ported to Moose.

=item Go read Moose::Manual

=back

=head1

=over

=item *

Moose helps me write more consise,
easier to understand code.

=item *

So just converting a class to Moose ==
refactoring, right?

=back

=head1

B<YES>. If you can turn poopy code into 
idiomatic Moose classes without breaking sh*t as you don't
have enough tests, that's refactoring.

Fairly easy in practice, given you wrote good tests.

=head1 YOU NEED TESTS

Or you B<will> hurt yourself.

=head1 Some common refactorings

=over

=item *

Replace constructor with factory method (has & BUILD)

=item *

Encapsulate field (attributes)

=item *

Change unidirectional association to bidirectional (weak => 1)

=item *

Hide delegate (handles)

=item *

Extract interface (Roles)

=item *

Tease apart inheritance (Roles)

=item *

Replace inheritance with delegation Roles & builder)

=back

=head1 Common refactorings 2

=over

=item *

Replace data value with object (type coercions)

=item *

Replace type code with subclass (augment)

=item *

Replace array with object (BUILDARGS, type coercions)

=item *

Duplicate observed data (handles, trigger, lazy_build)

=item *

Encapsulate collection (MX::AttributeHelpers)

=item *

Replace type code with strategy (MX::Traits)

=item *

Remove setting method (is => 'ro', init_arg => undef)

=back

=head1 Replace constructor with factory method 1

=begin perl

    package MyClass;
    use strict;
    use warnings;

    sub new {
        my ($class, %args) = @_; # Maybe, or several other patterns
        if (!$args{foo}) {
            die("No foo");
        }
        # Lots more code like this
        bless \%args, $class;
    }

=end perl

=head1 Replace constructor with factory method 2

=begin perl

    package MyClass;
    use Moose;

    has foo => ( is => 'rw', required => 1 );

=end perl

=head1 Encapsulate field 1

=begin perl

    sub attribute_list {
        my ($self) = @_;
        $self->{attribute_list} ||= [];
    }

    push(@{$thing->attribute_list}, 'item');
    warn(sprintf("Have %s attributes", scalar(@{$thing->attribute_list})));

=end perl

=head1 Encapsulate field 2

=begin perl

    has _attribute_list => (
        is => 'ro', default => sub { [] }
        metaclass => 'Collection::Hash',
        provides => {
            count => 'number_of_attributes',
            add => 'add_attribute',
        },
    );

    $thing->add_attribute('item');
    warn(sprintf("Have %s attributes", $thing->number_of_attributes));

=end perl

=head1 Hide delegate 1

=begin perl

    package Foo;

    sub thing {
        my ($self) = @_;
        $self->{thing} ||= Thing->new($self->_new_thing_options);
    }

    my $baz = $foo->thing->some_method_on_thing;
    $foo->thing->some_other_method_on_thing($bar * 2);
    # YOU JUST BROKE THE LAW OF DEMETER.

=end perl

=head1 Hide delegate 2

=begin perl

    package Foo;

    has _thing => ( 
        isa => 'Thing', is => 'ro', builder => '_build_thing'
        handles => {
            get_record_list => 'some_method_on_thing',
            set_record_price => 'some_other_method_on_thing',
        }
    );

    sub _build_thing { Thing->new($_[0]->_new_thing_options) }


    my $baz = $foo->get_record_list;
    $foo->set_record_price($bar * 2);

=end perl

=head1 Extract interface 1

=begin perl

    package Dog;

    sub bark { warn('woof'); }
    sub fur { warn('fluufy'); }
    sub pet {
        my ($self, $petter) = @_;
        warn("Drool all over " . $petter->name);
    }

=end perl

=head1 Extract interface 2

=begin perl

    package Dog::Breed::Rottweiler;
    use base qw/Dog/;

    sub pet {
        my ($self, $petter, @args) = @_;
        if ($petter->age < 12) {
            $self->attack($petter);
        }
        else {
            $self->SUPER::pet($petter, @args);
        }
    }

=end perl

=head1 Extract interface 3

=begin perl

    package DogLover;

    sub show_thing_to {
        my ($self, $thing) = @_;

        if ($thing->can('bark')) { # It's a dog, pet it!
            $self->pet($thing);
        }
        else {
            warn("Meh!");
        }
    }

    $doglover->show_thing_to( Tree->new );
    # Oh dear. Tree->bark was NOT the method you expected..

=end perl

=head1 Extract interface 4

=begin perl

    package Dog;
    use Moose::Role;

    requires qw/
        bark
        fur
        pet
    /;

=end perl

=head1 Extract Interface 5

=begin perl

    package Dog::Generic;
    use Moose;

    with 'Dog';

    sub bark { warn('woof'); }
    sub fur { warn('fluufy'); }
    sub pet { ...

=end perl

=head1 Extract Interface 6

=begin perl

    package Dog::Breed:Rottweiler:
    use Moose;

    extends 'Dog::Generic';
    # Etc..

    if ( does_role( $thing, 'Dog' ) ) { # It's a dog, pet it!
        $self->pet($thing);

=end perl

=head1 Tease apart inheritance 1

=begin perl

package My::Class;

# This may contain up to one lie, can you spot it?
use base qw/
    My::DatabaseBacked
    My::UniqueId
    My::QueryCache
    My::DisplayableClass
    My::Utils
    My::Mixin::Foo
    My::Mixin::Bar
/;

    sub _display_type { 'Listbox' }

=end perl

EPIC FAIL! Is that really the right order?

If any of your base classes multiply inherit, you have no idea!

=head1 Tease apart inheritance 2

=begin perl

    package My::Class;
    use Moose;
    use My::DatabasePersistence;
    use My::Utils;
    use namespace::autoclean;
    does qw/  Persistent FooLike BarLike Displayable /;
    
    # Note that the 'persistence' attribute from the Persistent role
    # will use handles => to give you all the methods you used to get
    # from 'database backed' and 'query cache' will wrap those methods.
    has '+persistence_class' => ( default => 'Cached' );
    has '+id_type' => ( default => 'Unique' );

=end perl

=head1 Replace inheritance with delegation 1

=begin perl

    package MyClass;
    use base qw/Persistent/;

    sub id { rand(10000) }

    my $thing = MyClass->new;
    $thing->insert;
    $thing->attr(20);
    $thing->update;

=end perl

=head1 Replace inheritance with delegation 2

=begin perl

    package MyClass;

    with 'Persistent';

    sub id { rand(10000) }

    my $p = Persistence::Engine->new(%p);
    my $thing = MyClass->new( _persistence => $p );
    $thing->insert;
    $thing->attr(20);
    $thing->update;

=end perl

=head1 Replace inheritance with delegation 3

=begin perl

    package Persistent;
    use Moose::Role;

    has _persistence => (
        does => 'Persistence::Engine', required => 1, is => 'ro',
        handles => [qw/
            insert
            update
            delete
        /],
        weak => 1,
    );

=end perl

Note how you just got sharding B<for free>, as each object knows which data
store it belongs to.

=head1 Replace data value with object 1

=head1 Replace type code with subclass (augment) 1

=head1 Moose with existing classes

=head2 Refactor gradually

=over

=item From the top down..

=item Or the bottom up

=back

B<You need tests>

=head1 Not inheriting Moose constructor

=head2 You lose:

=over

=item BUILD

=item default

=item builder

=back

=head1 Can still use:

=over

=item lazy_build

=item Roles

=item Method modifiers

=back

=head1 Not inheriting a Moose::Object destructor

Your own DESTROY method works just
like usual, no DEMOLISH

=head1 Don't go mad!

=over

=item 1. Convert several independent parts of the same class hierarchy.

=item 2. Use different combinations of MooseX modules

=item 3. Write 3 of your own Moose::Exporter based things.

=back

B<BANG>. 

This will hurt you with metaclass incompatibility

=head1 Beware global destruction

Moving stuff onto the metaclass and delegating in DEMOLISH methods (especially using handles
and/or MooseX::ClassAttribute) will hurt you.

This is not really the fault of Moose, it's due to the
way global destruction works.

Class attributes are generally wrong anyway, most things should be instance data, or factored out.

=over

=item KISS

=item Did I mention tests?

=back

=head1 Summary

=over

=item KISS

=item Write better code

=item Write less code

=item Write more tests

=item Refactor often

=back

=head1 Rants (redux)

=over

=item Small methods

=item Class data & God objects are bad

=item Multiple inheritence is bad

=item Delegation uber alles

=item Composition usually superior to inheritence

=item Don't put everything in instance data, your clients should call methods with prameters

=item If you can hide your data, and expose instead operations on that data, do so!

=back

=head1 Questions?

Anyone?
